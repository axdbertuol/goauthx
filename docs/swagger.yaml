basePath: /v1
definitions:
  dtos.CreateUserCredentialsDTO:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
      socialId:
        type: string
      status:
        type: string
      username:
        type: string
    required:
    - email
    - role
    - status
    - username
    type: object
  dtos.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dtos.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        minLength: 5
        type: string
    required:
    - password
    type: object
  dtos.TokenDTOResponse:
    properties:
      refreshToken:
        type: string
      token:
        type: string
      tokenExpires:
        type: string
      user:
        $ref: '#/definitions/dtos.UserCredentialsResponse'
    type: object
  dtos.UserCredentialsResponse:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      socialId:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.UserCredentials:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        description: email is from the auth micro
        type: string
      id:
        type: integer
      passwordHash:
        type: string
      role:
        type: string
      socialId:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
      username:
        description: username is from the auth microservice
        type: string
    type: object
host: petstore.swagger.io
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /auth/check-token:
    get:
      consumes:
      - application/json
      description: Check if the provided JWT token has expired
      parameters:
      - description: JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            type: string
        "400":
          description: Invalid token
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "401":
          description: Token is invalid
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Check Token Expiration
      tags:
      - Auth
  /auth/google:
    post:
      consumes:
      - application/json
      description: Handles the sign-in with Google functionality.
      parameters:
      - description: Google ID token
        in: formData
        name: idToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful sign-in
          schema:
            $ref: '#/definitions/dtos.TokenDTOResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Sign in with Google
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with provided credentials and issue a JWT token
      parameters:
      - description: User login details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            $ref: '#/definitions/dtos.TokenDTOResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "401":
          description: Invalid username or password
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Failed to generate token
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: User login
      tags:
      - Auth
  /auth/renew-tokens:
    post:
      consumes:
      - application/json
      description: Refresh JWT token if it's within 30 minutes of expiration
      parameters:
      - description: JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: New JWT token
          schema:
            $ref: '#/definitions/dtos.TokenDTOResponse'
        "400":
          description: Invalid token
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "401":
          description: Token can't be refreshed yet
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Failed to generate new token
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details
      parameters:
      - description: User registration details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateUserCredentialsDTO'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "409":
          description: Username or email already exists
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Failed to create user
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /user/profile:
    get:
      description: Retrieve all user profiles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserCredentials'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get all user profiles
  /user/profile/{id}:
    delete:
      description: Delete a user profile by its ID
      operationId: delete-user-profile
      parameters:
      - description: User Profile ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Delete a user profile
    get:
      description: Retrieve a user profile by its ID
      operationId: get-user-profile-by-id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserCredentials'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get a user profile by ID
    put:
      consumes:
      - application/json
      description: Update an existing user profile
      operationId: update-user-profile
      parameters:
      - description: User Profile ID
        in: path
        name: id
        required: true
        type: string
      - description: User Profile object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserCredentialsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Update a user profile
swagger: "2.0"
